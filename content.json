{"meta":{"title":"JKXY Blog","subtitle":"茫茫人海中的一枚程序员","description":"JKXY的个人博客","author":"JKXY","url":"http://jkxy.club"},"pages":[{"title":"","date":"2017-05-24T06:43:12.502Z","updated":"2017-05-24T06:34:47.813Z","comments":true,"path":"baidu_verify_95TbrEOzk9.html","permalink":"http://jkxy.club/baidu_verify_95TbrEOzk9.html","excerpt":"","text":"95TbrEOzk9"},{"title":"","date":"2017-05-24T06:42:43.691Z","updated":"2017-05-24T06:37:40.302Z","comments":true,"path":"google6a3a347f0498b40f.html","permalink":"http://jkxy.club/google6a3a347f0498b40f.html","excerpt":"","text":"google-site-verification: google6a3a347f0498b40f.html"},{"title":"","date":"2017-05-19T08:59:29.268Z","updated":"2017-05-19T08:59:29.268Z","comments":false,"path":"categories/index.html","permalink":"http://jkxy.club/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-05-19T08:59:10.686Z","updated":"2017-05-19T08:59:10.686Z","comments":false,"path":"tags/index.html","permalink":"http://jkxy.club/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Android设计模式之单例模式","slug":"Android设计模式之单例模式","date":"2017-05-22T08:22:39.000Z","updated":"2017-05-22T08:32:10.613Z","comments":true,"path":"2017/05/22/Android设计模式之单例模式/","link":"","permalink":"http://jkxy.club/2017/05/22/Android设计模式之单例模式/","excerpt":"","text":"参考：https://github.com/simple-android-framework-exchange/android_design_patterns_analysis/tree/master/singleton/mr.simple 模式的定义确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。 模式的使用场景确保某个类有且只有一个对象的场景，例如创建一个对象需要消耗的资源过多，如要访问 IO 和数据库等资源。 UML类图 实现介绍单例模式是设计模式中最简单的，只有一个单例类，没有其他的层次结构与抽象。该模式需要确保该类只能生成一个对象，通常是该类需要消耗太多的资源或者没有没有多个实例的理由。 方式一：public class Singleton{ private static final Singleton mSingleton = new Singleton (); public static Singleton getSingleton() { return mSingleton; } } 方式二：/** *double-check， 避免并发时创建了多个实例, 该方式不能完全避免并发带来的破坏. */ public class Singleton { private static Sinleton mInstance = null; public static Singleton getInstance(){ if(mInstance == null){ synchronized (Sinleton.class){ mInstance = new Singleton(); } } return mInstance; } } 方式三：public class Singleton { /** * 静态内部类 * * @author mrsimple * */ private static class SingletonHolder { private static final Singleton mOnlyInstance = new Singleton(); } /** * 在第一次加载SingletonHolder时初始化一次mOnlyInstance对象, 保证唯一性, 也延迟了单例的实例化, * 如果该单例比较耗资源可以使用这种模式. * * @return */ public static Singleton getInstanceFromHolder() { return SingletonHolder.mOnlyInstance; } } 方式四：/** * 方式四 : 枚举单例, 线程安全 */ public class Singleton { enum SingletonEnum{ INSTANCE; } } 方式五 :public class Singleton { /** * 方式五 : 注册到容器, 根据key获取对象.一般都会有多种相同属性类型的对象会注册到一个map中 * instance容器 */ private static Map&lt;string singleton=&quot;&quot;&gt; objMap = new HashMap&lt;string singleton=&quot;&quot;&gt;(); /** * 注册对象到map中 * @param key * @param instance */ public static void registerService(String key, Singleton instance) { if (!objMap.containsKey(key) ) { objMap.put(key, instance) ; } } /** * 根据key获取对象 * @param key * @return */ public static Singleton getService(String key) { return objMap.get(key) ; } } 不管以哪种形式实现单例模式，它们的核心原理都是将构造函数私有化，并且通过静态方法获取一个唯一的实例，在这个获取的过程中你必须保证线程安全、反序列化导致重新生成实例对象等问题，该模式简单，但使用率较高。 优点由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式来解决；单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。 缺点单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://jkxy.club/tags/Android/"},{"name":"设计模式","slug":"设计模式","permalink":"http://jkxy.club/tags/设计模式/"}]},{"title":"诞生日记","slug":"诞生日记","date":"2017-05-22T03:56:33.000Z","updated":"2017-05-22T03:57:09.457Z","comments":true,"path":"2017/05/22/诞生日记/","link":"","permalink":"http://jkxy.club/2017/05/22/诞生日记/","excerpt":"","text":"作为一个小白，只会Android，其他都是不怎么了解，Hexo之前从来都没有听说过，git因为工作原因也没有使用（一直在SVN的世界），github也因为自己矬B的英语，用的也很少，不过即使是这样，也一直想搭建一个自己的博客，一个程序员的家。可是一直都是无从下手的感觉，突然有一天，看到一篇文章说是使用github+hexo能快速的搭建自己的个人博客，然后就看了一下，发现确实很简单（还是太年轻，过程中遇到了很多坑啊），自己又google了一下，看了其他相关的文章，确实很不错，于是就开启自己个人博客搭建之旅了。 一、了解Hexo你要了解一样东西，最好的方式就是看官方文档传送门。下面简单记录一下有关Hexo的东西。 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装前提检查电脑中是否已安装下列应用程序： Node.js Git 安装（使用命令）：$ npm install -g hexo-cli 常用命令 名字 命令 说明 新建网站 $ hexo init [folder] folder 为存放目录 新建文章 $ hexo new [layout] layout 布局， 生成静态文件 $ hexo g 这是简写generate 启动服务器 $ hexo s server，访问网址为： http://localhost:4000/ 部署网站 $ hexo d deploy 清除缓存 $ hexo clean 发表草稿 $ hexo publish [layout] 渲染文件 $ hexo render [file2] … 获取版本 $ hexo version 二、了解GitGit的介绍在网上有一大堆，在这里我就不说了，同样记录一下常用命令 名字 命令 说明 初始化 git init 将当前目录初始化成为git仓库 查看状态 git status 获取一些状态信息，比如需要添加，提交的文件等 添加 git add 提交 git commit 查看log git log 可以查看所有产生的 commit 记录 获取分支 git branch *代表当前分支 新建分支 git branch a a表示你新建的分支名称 切换分支，tag git checkout a a表示你的分支名称，tag名称 新建并切换分支 git checkout -b a a同上 合并分支 git merge 需切换到主分支 删除分支 git branch -d a a同上 强制删除分支 git branch -D a a同上 获取tag git tag 新建tag git tag v1.0 v1.0表示tag名称 远程更新 git pull 远程添加 git push 设置别名 git config –global alias.s status 相当于设置快捷方式，status只是举例子，其他的都可以设置 三、搭建开始 注册Github账号，创建仓库。 安装node.js 安装git 安装配置Hexo 更换Hexo主题主题传送门 发表文章 END（就是这么简单！）","categories":[],"tags":[]}]}